name: Release

on:
  push:
    tags:
      - "*"
  workflow_dispatch:

permissions:
  id-token: write
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    environment: production

    strategy:
      fail-fast: false
      matrix:
        os: [
          ubuntu-latest,
          macos-latest,
          macos-13,
          windows-latest
        ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      - name: Install dependencies
        run: npm install

      - name: Decode and save APPLE_API_KEY
        if: runner.os == 'macOS'
        run: echo "${{ secrets.ELECTRON_APPLE_API_KEY }}" | base64 --decode > /tmp/apikey.p8

      - name: Azure Login
        uses: Azure/login@v
        if: runner.os == 'Windows'
        with:
          auth-type: IDENTITY
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      - name: Install TrustedSigning Module
        if: runner.os == 'Windows'
        shell: pwsh
        run: Install-Module -Name TrustedSigning -RequiredVersion 0.4.1 -Force -Repository PSGallery

      - name: Build Electron app
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          EP_GH_IGNORE_TIME: true
          EP_DRAFT: false
          APPLE_API_KEY: /tmp/apikey.p8
          APPLE_API_KEY_ID: ${{ secrets.ELECTRON_APPLE_API_KEY_ID }}
          APPLE_API_ISSUER: ${{ secrets.ELECTRON_APPLE_API_ISSUER }}
          CSC_LINK: ${{ secrets.ELECTRON_CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.ELECTRON_CSC_KEY_PASSWORD }}
          CODESIGNING_ACCOUNT_NAME: ${{ secrets.ELECTRON_CODESIGNING_ACCOUNT_NAME }}
          CERTIFICATE_PROFILE_NAME: ${{ secrets. ELECTRON_CERTIFICATE_PROFILE_NAME }}
        run: |
          npm run build:electron
